name: Tag Release

on:
  push:
    branches:
      - main

jobs:
  create-deployment:
    runs-on: ubuntu-latest
    # needs: tag-release
    outputs:
      deployment-id: ${{ steps.create-deployment.outputs.result }}

    steps:
      - uses: actions/checkout@v2
      -
        id: create-deployment
        uses: actions/github-script@v5
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              auto_merge: false,
              required_contexts: [],
              environment: 'staging',
              payload: {
                test: 'test payload data'
              },
              description: 'Test deployment description'
            })

            return deployment.data.id

  tag-release:
    name: Tag Release
    runs-on: ubuntu-latest
    needs: create-deployment

    outputs:
      release_tag: ${{ steps.tag-release.outputs.release_tag }}
      release_tag_ref: ${{ steps.tag-release.outputs.release_tag_ref }}

    steps:
      - uses: actions/checkout@v2

      - 
        name: Tag Release
        id: tag-release
        run: |
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"

          RELEASE_NAME=$(git show -s --date=format:'%Y%m%d' --format=%cd-%h ${{ github.sha }})

          git tag \
            -a $RELEASE_NAME \
            -m "$(git show --pretty=medium -s)"

          git push origin $RELEASE_NAME

          echo "::set-output name=release_tag::${RELEASE_NAME}"
          echo "::set-output name=release_tag_ref::refs/tags/${RELEASE_NAME}"

  update-deployment:
    runs-on: ubuntu-latest
    needs: [tag-release, create-deployment]

    steps:
      - uses: actions/checkout@v2
      -
        id: finish-deployment
        uses: actions/github-script@v5
        with:
          script: |
            const deploymentStatus = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment-id }},
              state: 'in_progress',
              environment_url: 'https://my-service.cv-dev.xyz',
              log_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })

  finish-deployment:
    runs-on: ubuntu-latest
    needs: [update-deployment, create-deployment]

    steps:
      - uses: actions/checkout@v2
      -
        id: finish-deployment
        uses: actions/github-script@v5
        with:
          script: |
            const deploymentStatus = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment-id }},
              state: 'success',
              environment_url: 'https://my-service.cv-dev.xyz',
              log_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })