name: Merge Main

on:
  push:
    branches:
      - main

concurrency: staging

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '16'

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build --if-present

  linting:
    name: Super Lint
    runs-on: ubuntu-latest

    steps:
      - name: Placeholder Lint
        run: echo "LINT"
      # - name: Checkout Code
      #   uses: actions/checkout@v2
      #   with:
      #     # Full git history is needed to get a proper list of changed files within `super-linter`
      #     fetch-depth: 0

      ################################
      # Run Linter against code base #
      ################################
      # - name: Lint Code Base
      #   uses: github/super-linter@v4
      #   env:
      #     DEFAULT_BRANCH: master
      #     LINTER_RULES_PATH: /
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     VALIDATE_ALL_CODEBASE: false
      #     VALIDATE_GITHUB_ACTIONS: false
      #     JAVASCRIPT_DEFAULT_STYLE: prettier
      #     JAVASCRIPT_ES_CONFIG_FILE: .eslintrc.json
      #     TYPESCRIPT_DEFAULT_STYLE: prettier
      #     TYPESCRIPT_ES_CONFIG_FILE: .eslintrc.json

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    # needs: [build, linting]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '16'

      - name: Install
        run: npm ci

      - name: Test
        run: npm test

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: coverage

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '16'

      - name: Install
        run: npm ci

      - name: Test
        run: npm test

  build-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [integration-test, unit-test, linting, build]
    outputs:
      image-digest: ${{ steps.docker_build.outputs.digest }}
    steps:
      - uses: actions/checkout@v2
      # For now this is required so the push command outputs the correct digest
      # @see https://github.com/docker/build-push-action/issues/461
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ secrets.DOCKER_REPO }}/${{ secrets.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Login to GAR
        uses: docker/login-action@v1
        with:
          registry: us-central1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_AUTH }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy Service
    runs-on: ubuntu-latest
    needs: build-image

    env:
      MY_SERVICE_IMAGE: ${{ secrets.DOCKER_REPO }}/${{ secrets.IMAGE_NAME }}@${{ needs.build-image.outputs.image-digest }}

    steps:
      - uses: actions/checkout@v2

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GCP_AUTH }}

      - name: Set up Google Cloud Tools
        uses: google-github-actions/setup-gcloud@master

      - name: gcloud Info
        run: gcloud info

      - uses: hashicorp/setup-terraform@v1

      # Inject ENV Variables into infra/deployment.tfvars.template so they can be used
      # by default by Terraform in later steps
      - name: Prepare Deployment
        run: make prepare-deployment

      - name: Terraform Init
        id: init
        run: make terraform-init

      - name: Terraform Validate
        id: validate
        run: make terraform-validate

      - name: Terraform Plan
        id: plan
        run: make terraform-plan

      - name: Terraform Apply
        run: make terraform-apply

      # - name: Deploy To Cloud Run
      #   run: |
      #     gcloud run deploy typescript-node-boilerplate \
      #       --region us-central1 \
      #       --image us-central1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT_ID }}/my-test-repo/typescript-node-boilerplate@${{ steps.docker_build.outputs.digest }} \
      #       --platform managed \
      #       --allow-unauthenticated \
      #       --labels service=typescript-node-boilerplate


env:
  GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
  GCP_REGION: us-central1
  ENV: staging
